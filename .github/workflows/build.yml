name: build

on: push

jobs:

  build:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        architecture: [linux-arm-v7, linux-arm64, linux-amd64]
    outputs:
      version: ${{ steps.prep.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Shellcheck
        run: |
          shellcheck --version
          if [[ -d ./root ]]; then
            find "./root" -type f -print -exec shellcheck {} \;
          else
            true
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true
          version: latest
          driver-opts: image=moby/buildkit:master

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.PERSONAL_TOKEN }}

      - name: Prepare
        id: prep
        run: |
          ARCHITECTURE=${{ matrix.architecture }}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo ::set-output name=title::${GITHUB_REPOSITORY//docker-/}:${GITHUB_REF//refs\/heads\//}
          echo ::set-output name=revision::${GITHUB_SHA}
          echo ::set-output name=source::${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/tree/${GITHUB_REF//refs\/heads\//}
          echo ::set-output name=vendor::${{ github.repository_owner }}
          echo ::set-output name=url::${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/blob/master/README.md
          echo ::set-output name=platform::${ARCHITECTURE//-/\/}
          echo ::set-output name=cache::${GITHUB_REPOSITORY//docker-/}:${GITHUB_REF//refs\/heads\//}-cache-${{ matrix.architecture }}
          echo ::set-output name=tag::${GITHUB_REPOSITORY//docker-/}:${GITHUB_REF//refs\/heads\//}-${GITHUB_SHA:0:7}-${GITHUB_RUN_NUMBER}-${{ matrix.architecture }}
          echo ::set-output name=version::${APP_VERSION=1.10}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          platforms: ${{ steps.prep.outputs.platform }}
          file: ./${{ matrix.architecture }}.Dockerfile
          cache-from: ${{ steps.prep.outputs.cache }}
          cache-to: ${{ steps.prep.outputs.cache }}
          tags: |
            ${{ steps.prep.outputs.tag }}
            ghcr.io/${{ steps.prep.outputs.tag }}
          labels: |
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.title=${{ steps.prep.outputs.title }}
            org.opencontainers.image.revision=${{ steps.prep.outputs.revision }}
            org.opencontainers.image.source=${{ steps.prep.outputs.source }}
            org.opencontainers.image.vendor=${{ steps.prep.outputs.vendor }}
            org.opencontainers.image.url=${{ steps.prep.outputs.url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
          build-args: |
            VERSION=${{ steps.prep.outputs.version }}

      - name: List installed packages
        run: |
          docker run --rm --entrypoint="" ${{ steps.prep.outputs.tag }} apk -vv info | sort

  publish:
    runs-on: ubuntu-20.04
    outputs:
      status: ${{ steps.status.outputs.result }}
    needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.PERSONAL_TOKEN }}

      - name: Create docker manifests
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
        run: |
          registries=(docker.io ghcr.io)
          for registry in ${registries[*]}; do
            TAG_BASE="${GITHUB_REPOSITORY//docker-/}:${GITHUB_REF//refs\/heads\//}"
            TAG="${TAG_BASE}-${GITHUB_SHA:0:7}-${GITHUB_RUN_NUMBER}"
            docker manifest create ${registry}/${TAG_BASE} --amend ${registry}/${TAG}-linux-amd64 --amend ${registry}/${TAG}-linux-arm-v7 --amend ${registry}/${TAG}-linux-arm64
            docker manifest push   ${registry}/${TAG_BASE}
            docker manifest create ${registry}/${TAG_BASE}-${{ needs.build.outputs.version }} --amend ${registry}/${TAG}-linux-amd64 --amend ${registry}/${TAG}-linux-arm-v7 --amend ${registry}/${TAG}-linux-arm64
            docker manifest push   ${registry}/${TAG_BASE}-${{ needs.build.outputs.version }}
            docker manifest create ${registry}/${TAG_BASE}-${GITHUB_SHA:0:7} --amend ${registry}/${TAG}-linux-amd64 --amend ${registry}/${TAG}-linux-arm-v7 --amend ${registry}/${TAG}-linux-arm64
            docker manifest push   ${registry}/${TAG_BASE}-${GITHUB_SHA:0:7}
            if [[ ${GITHUB_REF//refs\/heads\//} == stable ]]; then
              docker manifest create ${registry}/${GITHUB_REPOSITORY//docker-/}:latest --amend ${registry}/${TAG}-linux-amd64 --amend ${registry}/${TAG}-linux-arm-v7 --amend ${registry}/${TAG}-linux-arm64
              docker manifest push   ${registry}/${GITHUB_REPOSITORY//docker-/}:latest
            fi
          done

      - name: Status
        id: status
        run: |
          echo ::set-output name=result::success

  notify:
    runs-on: ubuntu-20.04
    if: ${{ always() }}
    needs: [build, publish]
    steps:
      - name: Send discord notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          GITHUB_OWNER: ${{ github.repository_owner }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION_FIELD: ${{ needs.build.outputs.version }}
          STATUS: ${{ needs.publish.outputs.status }}
        run: |
          curl -u "${GITHUB_OWNER}:${GITHUB_TOKEN}" -fsSL https://gist.githubusercontent.com/${GITHUB_OWNER}/3d98159d47e0bf5eccbff221f1288472/raw/discord-action-notify.sh > discord-action-notify.sh
          bash discord-action-notify.sh
